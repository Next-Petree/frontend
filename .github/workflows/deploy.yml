name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest # Ubuntu 최신 버전 환경에서 실행

    steps:
      - name: Checkout
        uses: actions/checkout@v2 # GitHub Actions에서 프로젝트를 체크아웃

      - name: Setup Node.js environment
        uses: actions/setup-node@v2 # Node.js 환경 설정
        with:
          node-version: 14 # Node.js 버전 설정

      - name: Cache node modules
        uses: actions/cache@v2 # node_modules 캐싱을 위한 액션
        id: cache
        with:
          path: node_modules
          key: npm-packages-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci # node_modules를 캐시에서 불러오지 못한 경우만 npm ci 실행

      - name: Build and Test
        run: |
          npm run build
          npm run test

      - name: Set up .env
        run: |
          echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> .env
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2 # Docker Hub에 로그인
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 # Docker Buildx 설정

      - name: Build and push
        uses: docker/build-push-action@v2 # Docker 이미지 빌드 및 푸시
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jmdb

      - name: Pull and restart Docker Container
        uses: appleboy/ssh-action@v1 # SSH를 사용하여 Docker 컨테이너 관리
        with:
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jmdb
            docker stop jmdb || true
            docker run -d --rm --name jmdb -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/jmdb

            # Notify Slack on successful deployment
      - name: Notify Success to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          author_name: www-be
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: never
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
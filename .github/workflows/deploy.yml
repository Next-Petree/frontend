name: CI/CD

on:
  push:  
    branches: [ main ]
  pull_request:
    branches: [ main ]  
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:    
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
      - name: Install dependencies
        run: npm install --force

      - name: .env setting
        run: | 
          echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> .env
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

      - name: Test
        run: npm run test

      - name: Build
        run: npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jmdb

	  # 마지막으로 ssh로 인스턴스에 연결하여 이미지를 Pull하고 컨테이너를 재시작한다.
      - name: Pull and restart Docker Container
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jmdb
            docker stop jmdb
            docker run -d --rm --name jmdb -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/jmdb

      - name: Notify Deploy Job Done
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: frontend
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
